// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { AddGameWinnerData, AddGameWinnerErrors, AddGameWinnerResponses, AdjustRoundTimeData, AdjustRoundTimeErrors, AdjustRoundTimeResponses, AdminLoginData, AdminLoginErrors, AdminLoginResponses, CancelGameSessionData, CancelGameSessionErrors, CancelGameSessionResponses, CancelRoundData, CancelRoundErrors, CancelRoundResponses, CreateAbilityData, CreateAbilityResponses, CreatePlayerData, CreatePlayerErrors, CreateRoleData, CreateRoleResponses, DeletePlayerData, DeletePlayerErrors, DeletePlayerResponses, DuplicateGameSessionData, DuplicateGameSessionErrors, FinishGameSessionData, FinishGameSessionErrors, FinishGameSessionResponses, FinishRoundData, FinishRoundErrors, FinishRoundResponses, GetAbilityData, GetAbilityErrors, GetAbilityResponses, GetActiveGameIdData, GetActiveGameIdErrors, GetActiveGameIdResponses, GetApiHealthData, GetApiHealthResponses, GetCurrentRoundData, GetCurrentRoundErrors, GetCurrentRoundResponses, GetGamePlayersData, GetGamePlayersErrors, GetGamePlayersResponses, GetGameSessionByIdData, GetGameSessionByIdErrors, GetGameSessionByIdResponses, GetPlayerByIdData, GetPlayerByIdErrors, GetPlayerByIdResponses, GetPlayerByNameData, GetPlayerByNameErrors, GetPlayerByNameResponses, GetRoleData, GetRoleErrors, GetRoleResponses, GetRulesetAbilitiesData, GetRulesetAbilitiesErrors, GetRulesetAbilitiesResponses, GetRulesetByIdData, GetRulesetByIdErrors, GetRulesetByIdResponses, GetRulesetRolesData, GetRulesetRolesResponses, PauseCurrentRoundData, PauseCurrentRoundErrors, PauseCurrentRoundResponses, PlayerLoginData, PlayerLoginErrors, PlayerLoginResponses, ResumeCurrentRoundData, ResumeCurrentRoundErrors, ResumeCurrentRoundResponses, StartNewGameSessionData, StartNewGameSessionErrors, StartNewGameSessionResponses, StartNewRoundData, StartNewRoundErrors, UpdateAbilityInformationData, UpdateAbilityInformationErrors, UpdateAbilityInformationResponses, UpdateGameParticipantsData, UpdateGameParticipantsErrors, UpdateGameParticipantsResponses, UpdateGameRulesetData, UpdateGameRulesetErrors, UpdateGameRulesetResponses, UpdatePlayerData, UpdatePlayerErrors, UpdatePlayerResponses, UpdateRoleAbilitiesData, UpdateRoleAbilitiesErrors, UpdateRoleAbilitiesResponses, UpdateRoleInformationData, UpdateRoleInformationErrors, UpdateRoleInformationResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getRole = <ThrowOnError extends boolean = false>(options: Options<GetRoleData, ThrowOnError>) => {
    return (options.client ?? client).get<GetRoleResponses, GetRoleErrors, ThrowOnError>({
        url: '/api/roles/{id}',
        ...options
    });
};

export const updateRoleInformation = <ThrowOnError extends boolean = false>(options: Options<UpdateRoleInformationData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateRoleInformationResponses, UpdateRoleInformationErrors, ThrowOnError>({
        url: '/api/roles/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const updateRoleAbilities = <ThrowOnError extends boolean = false>(options: Options<UpdateRoleAbilitiesData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateRoleAbilitiesResponses, UpdateRoleAbilitiesErrors, ThrowOnError>({
        url: '/api/roles/{id}/abilities',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getAbility = <ThrowOnError extends boolean = false>(options: Options<GetAbilityData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAbilityResponses, GetAbilityErrors, ThrowOnError>({
        url: '/api/abilities/{id}',
        ...options
    });
};

export const updateAbilityInformation = <ThrowOnError extends boolean = false>(options: Options<UpdateAbilityInformationData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateAbilityInformationResponses, UpdateAbilityInformationErrors, ThrowOnError>({
        url: '/api/abilities/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deletePlayer = <ThrowOnError extends boolean = false>(options: Options<DeletePlayerData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeletePlayerResponses, DeletePlayerErrors, ThrowOnError>({
        url: '/api/players/{id}',
        ...options
    });
};

export const getPlayerById = <ThrowOnError extends boolean = false>(options: Options<GetPlayerByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetPlayerByIdResponses, GetPlayerByIdErrors, ThrowOnError>({
        url: '/api/players/{id}',
        ...options
    });
};

export const updatePlayer = <ThrowOnError extends boolean = false>(options: Options<UpdatePlayerData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdatePlayerResponses, UpdatePlayerErrors, ThrowOnError>({
        url: '/api/players/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getActiveGameId = <ThrowOnError extends boolean = false>(options?: Options<GetActiveGameIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetActiveGameIdResponses, GetActiveGameIdErrors, ThrowOnError>({
        url: '/api/games/active',
        ...options
    });
};

export const duplicateGameSession = <ThrowOnError extends boolean = false>(options: Options<DuplicateGameSessionData, ThrowOnError>) => {
    return (options.client ?? client).post<unknown, DuplicateGameSessionErrors, ThrowOnError>({
        url: '/api/games/duplicate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const adminLogin = <ThrowOnError extends boolean = false>(options: Options<AdminLoginData, ThrowOnError>) => {
    return (options.client ?? client).post<AdminLoginResponses, AdminLoginErrors, ThrowOnError>({
        url: '/api/admin/login',
        ...options
    });
};

export const getApiHealth = <ThrowOnError extends boolean = false>(options?: Options<GetApiHealthData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiHealthResponses, unknown, ThrowOnError>({
        url: '/api/health',
        ...options
    });
};

export const getGameSessionById = <ThrowOnError extends boolean = false>(options: Options<GetGameSessionByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetGameSessionByIdResponses, GetGameSessionByIdErrors, ThrowOnError>({
        url: '/api/games/{gameId}',
        ...options
    });
};

export const getGamePlayers = <ThrowOnError extends boolean = false>(options: Options<GetGamePlayersData, ThrowOnError>) => {
    return (options.client ?? client).get<GetGamePlayersResponses, GetGamePlayersErrors, ThrowOnError>({
        url: '/api/games/{gameId}/players',
        ...options
    });
};

export const updateGameParticipants = <ThrowOnError extends boolean = false>(options: Options<UpdateGameParticipantsData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateGameParticipantsResponses, UpdateGameParticipantsErrors, ThrowOnError>({
        url: '/api/games/{gameId}/players',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const createPlayer = <ThrowOnError extends boolean = false>(options: Options<CreatePlayerData, ThrowOnError>) => {
    return (options.client ?? client).post<unknown, CreatePlayerErrors, ThrowOnError>({
        url: '/api/games/{gameId}/players',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const updateGameRuleset = <ThrowOnError extends boolean = false>(options: Options<UpdateGameRulesetData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateGameRulesetResponses, UpdateGameRulesetErrors, ThrowOnError>({
        url: '/api/games/{gameId}/ruleset',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const addGameWinner = <ThrowOnError extends boolean = false>(options: Options<AddGameWinnerData, ThrowOnError>) => {
    return (options.client ?? client).post<AddGameWinnerResponses, AddGameWinnerErrors, ThrowOnError>({
        url: '/api/games/{gameId}/winners/add',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const playerLogin = <ThrowOnError extends boolean = false>(options: Options<PlayerLoginData, ThrowOnError>) => {
    return (options.client ?? client).post<PlayerLoginResponses, PlayerLoginErrors, ThrowOnError>({
        url: '/api/games/{gameId}/login/{name}',
        ...options
    });
};

export const startNewGameSession = <ThrowOnError extends boolean = false>(options: Options<StartNewGameSessionData, ThrowOnError>) => {
    return (options.client ?? client).post<StartNewGameSessionResponses, StartNewGameSessionErrors, ThrowOnError>({
        url: '/api/games/{gameId}/start',
        ...options
    });
};

export const finishGameSession = <ThrowOnError extends boolean = false>(options: Options<FinishGameSessionData, ThrowOnError>) => {
    return (options.client ?? client).post<FinishGameSessionResponses, FinishGameSessionErrors, ThrowOnError>({
        url: '/api/games/{gameId}/finish',
        ...options
    });
};

export const cancelGameSession = <ThrowOnError extends boolean = false>(options: Options<CancelGameSessionData, ThrowOnError>) => {
    return (options.client ?? client).post<CancelGameSessionResponses, CancelGameSessionErrors, ThrowOnError>({
        url: '/api/games/{gameId}/cancel',
        ...options
    });
};

export const getPlayerByName = <ThrowOnError extends boolean = false>(options: Options<GetPlayerByNameData, ThrowOnError>) => {
    return (options.client ?? client).get<GetPlayerByNameResponses, GetPlayerByNameErrors, ThrowOnError>({
        url: '/api/games/{gameId}/players/{name}',
        ...options
    });
};

export const getCurrentRound = <ThrowOnError extends boolean = false>(options: Options<GetCurrentRoundData, ThrowOnError>) => {
    return (options.client ?? client).get<GetCurrentRoundResponses, GetCurrentRoundErrors, ThrowOnError>({
        url: '/api/games/{gameId}/rounds/current',
        ...options
    });
};

/**
 * Adds or removes time from the round timer.
 */
export const adjustRoundTime = <ThrowOnError extends boolean = false>(options: Options<AdjustRoundTimeData, ThrowOnError>) => {
    return (options.client ?? client).patch<AdjustRoundTimeResponses, AdjustRoundTimeErrors, ThrowOnError>({
        url: '/api/games/{gameId}/rounds/current/time',
        ...options
    });
};

export const pauseCurrentRound = <ThrowOnError extends boolean = false>(options?: Options<PauseCurrentRoundData, ThrowOnError>) => {
    return (options?.client ?? client).post<PauseCurrentRoundResponses, PauseCurrentRoundErrors, ThrowOnError>({
        url: '/api/games/{gameId}/rounds/current/pause',
        ...options
    });
};

export const resumeCurrentRound = <ThrowOnError extends boolean = false>(options?: Options<ResumeCurrentRoundData, ThrowOnError>) => {
    return (options?.client ?? client).post<ResumeCurrentRoundResponses, ResumeCurrentRoundErrors, ThrowOnError>({
        url: '/api/games/{gameId}/rounds/current/resume',
        ...options
    });
};

export const cancelRound = <ThrowOnError extends boolean = false>(options?: Options<CancelRoundData, ThrowOnError>) => {
    return (options?.client ?? client).post<CancelRoundResponses, CancelRoundErrors, ThrowOnError>({
        url: '/api/games/{gameId}/rounds/current/cancel',
        ...options
    });
};

export const finishRound = <ThrowOnError extends boolean = false>(options?: Options<FinishRoundData, ThrowOnError>) => {
    return (options?.client ?? client).post<FinishRoundResponses, FinishRoundErrors, ThrowOnError>({
        url: '/api/games/{gameId}/rounds/current/finish',
        ...options
    });
};

export const startNewRound = <ThrowOnError extends boolean = false>(options: Options<StartNewRoundData, ThrowOnError>) => {
    return (options.client ?? client).post<unknown, StartNewRoundErrors, ThrowOnError>({
        url: '/api/games/{gameId}/rounds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getRulesetById = <ThrowOnError extends boolean = false>(options: Options<GetRulesetByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetRulesetByIdResponses, GetRulesetByIdErrors, ThrowOnError>({
        url: '/api/rulesets/{rulesetId}',
        ...options
    });
};

export const getRulesetAbilities = <ThrowOnError extends boolean = false>(options: Options<GetRulesetAbilitiesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetRulesetAbilitiesResponses, GetRulesetAbilitiesErrors, ThrowOnError>({
        url: '/api/rulesets/{rulesetId}/abilties',
        ...options
    });
};

export const createAbility = <ThrowOnError extends boolean = false>(options: Options<CreateAbilityData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateAbilityResponses, unknown, ThrowOnError>({
        url: '/api/rulesets/{rulesetId}/abilties',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getRulesetRoles = <ThrowOnError extends boolean = false>(options: Options<GetRulesetRolesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetRulesetRolesResponses, unknown, ThrowOnError>({
        url: '/api/rulesets/{rulesetId}/roles',
        ...options
    });
};

export const createRole = <ThrowOnError extends boolean = false>(options: Options<CreateRoleData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateRoleResponses, unknown, ThrowOnError>({
        url: '/api/rulesets/{rulesetId}/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
