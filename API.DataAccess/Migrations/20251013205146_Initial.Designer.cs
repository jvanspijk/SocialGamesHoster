// <auto-generated />
using System;
using API.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.DataAccess.Migrations
{
    [DbContext(typeof(APIDatabaseContext))]
    [Migration("20251013205146_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Domain.Models.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("RulesetId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RulesetId");

                    b.ToTable("Abilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Participate in daily voting to lynch a suspect.",
                            Name = "Vote",
                            RulesetId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Can defend themselves against night attacks.",
                            Name = "Defense",
                            RulesetId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Choose one player to protect from death each night.",
                            Name = "Heal",
                            RulesetId = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "Choose one player to investigate each night and learn their role category.",
                            Name = "Investigate",
                            RulesetId = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "Choose one player to kill each night. Limited uses.",
                            Name = "Shoot",
                            RulesetId = 1
                        },
                        new
                        {
                            Id = 7,
                            Description = "Execute the Mafia's chosen target at night.",
                            Name = "Mafia Kill",
                            RulesetId = 1
                        },
                        new
                        {
                            Id = 8,
                            Description = "Choose the Mafia's nightly target. Appears as Townie to investigators.",
                            Name = "Organize Kill",
                            RulesetId = 1
                        },
                        new
                        {
                            Id = 9,
                            Description = "If lynched, you will kill one player who voted for you that night.",
                            Name = "Trick",
                            RulesetId = 1
                        },
                        new
                        {
                            Id = 10,
                            Description = "Win if your assigned target is lynched. You are immune to night kills until your target dies.",
                            Name = "Target Elimination",
                            RulesetId = 1
                        });
                });

            modelBuilder.Entity("API.Domain.Models.GameSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RulesetId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RulesetId");

                    b.ToTable("GameSessions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RulesetId = 1,
                            Status = 100
                        });
                });

            modelBuilder.Entity("API.Domain.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<int?>("GameSessionId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEliminated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GameSessionId");

                    b.HasIndex("RoleId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GameId = 1,
                            IsEliminated = false,
                            Name = "Alice Townie",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            GameId = 1,
                            IsEliminated = false,
                            Name = "John Doctor",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            GameId = 1,
                            IsEliminated = false,
                            Name = "Emily Investigator",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 4,
                            GameId = 1,
                            IsEliminated = false,
                            Name = "Michael Vigilante",
                            RoleId = 4
                        },
                        new
                        {
                            Id = 5,
                            GameId = 1,
                            IsEliminated = false,
                            Name = "Sarah Mafioso",
                            RoleId = 5
                        },
                        new
                        {
                            Id = 6,
                            GameId = 1,
                            IsEliminated = false,
                            Name = "Jessica Godfather",
                            RoleId = 6
                        },
                        new
                        {
                            Id = 7,
                            GameId = 1,
                            IsEliminated = false,
                            Name = "David Jester",
                            RoleId = 7
                        },
                        new
                        {
                            Id = 8,
                            GameId = 1,
                            IsEliminated = false,
                            Name = "Ashley Executioner",
                            RoleId = 8
                        },
                        new
                        {
                            Id = 9,
                            GameId = 1,
                            IsEliminated = false,
                            Name = "Matthew Townie",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 10,
                            GameId = 1,
                            IsEliminated = false,
                            Name = "Amanda Doctor",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 11,
                            GameId = 1,
                            IsEliminated = false,
                            Name = "Joshua Investigator",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 12,
                            GameId = 1,
                            IsEliminated = false,
                            Name = "Jennifer Vigilante",
                            RoleId = 4
                        },
                        new
                        {
                            Id = 13,
                            GameId = 1,
                            IsEliminated = false,
                            Name = "Daniel Mafioso",
                            RoleId = 5
                        },
                        new
                        {
                            Id = 14,
                            GameId = 1,
                            IsEliminated = false,
                            Name = "Elizabeth Godfather",
                            RoleId = 6
                        },
                        new
                        {
                            Id = 15,
                            GameId = 1,
                            IsEliminated = false,
                            Name = "James Jester",
                            RoleId = 7
                        },
                        new
                        {
                            Id = 16,
                            GameId = 1,
                            IsEliminated = false,
                            Name = "Charlie Executioner",
                            RoleId = 8
                        },
                        new
                        {
                            Id = 17,
                            GameId = 1,
                            IsEliminated = false,
                            Name = "Kyle Townie",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 18,
                            GameId = 1,
                            IsEliminated = false,
                            Name = "Bob Doctor",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 19,
                            GameId = 1,
                            IsEliminated = false,
                            Name = "Megan Investigator",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 20,
                            GameId = 1,
                            IsEliminated = false,
                            Name = "Laura Vigilante",
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("API.Domain.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("RulesetId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RulesetId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A regular citizen of the town. Your goal is to eliminate all threats.",
                            Name = "Townie",
                            RulesetId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "You are a medical professional dedicated to saving lives.",
                            Name = "Doctor",
                            RulesetId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "You seek the truth and uncover secrets hidden in the town.",
                            Name = "Investigator",
                            RulesetId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "You take justice into your own hands, even if it means getting your hands dirty.",
                            Name = "Vigilante",
                            RulesetId = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "A loyal member of the Mafia. You carry out the family's nightly kills.",
                            Name = "Mafioso",
                            RulesetId = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "The cunning leader of the Mafia. You are immune to basic investigations.",
                            Name = "Godfather",
                            RulesetId = 1
                        },
                        new
                        {
                            Id = 7,
                            Description = "Your only goal is to be lynched by the town.",
                            Name = "Jester",
                            RulesetId = 1
                        },
                        new
                        {
                            Id = 8,
                            Description = "You have a specific target you must get lynched to win.",
                            Name = "Executioner",
                            RulesetId = 1
                        });
                });

            modelBuilder.Entity("API.Domain.Models.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("API.Domain.Models.Ruleset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.ToTable("Rulesets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Town members aim to find and eliminate all evil roles, while Mafia and Neutral roles have their own secret goals, often involving the elimination of Town members. The game alternates between night, where players use their unique abilities, and day, where they discuss information, share their 'wills', and vote to hang someone.",
                            Name = "Town of Salem"
                        });
                });

            modelBuilder.Entity("AbilityRole", b =>
                {
                    b.Property<int>("AbilitiesId")
                        .HasColumnType("integer");

                    b.Property<int>("AssociatedRolesId")
                        .HasColumnType("integer");

                    b.HasKey("AbilitiesId", "AssociatedRolesId");

                    b.HasIndex("AssociatedRolesId");

                    b.ToTable("AbilityRole");
                });

            modelBuilder.Entity("PlayerPlayer", b =>
                {
                    b.Property<int>("CanBeSeenById")
                        .HasColumnType("integer");

                    b.Property<int>("CanSeeId")
                        .HasColumnType("integer");

                    b.HasKey("CanBeSeenById", "CanSeeId");

                    b.HasIndex("CanSeeId");

                    b.ToTable("PlayerVisibility", (string)null);
                });

            modelBuilder.Entity("RoleRole", b =>
                {
                    b.Property<int>("CanBeSeenById")
                        .HasColumnType("integer");

                    b.Property<int>("CanSeeId")
                        .HasColumnType("integer");

                    b.HasKey("CanBeSeenById", "CanSeeId");

                    b.HasIndex("CanSeeId");

                    b.ToTable("RoleVisibility", (string)null);
                });

            modelBuilder.Entity("API.Domain.Models.Ability", b =>
                {
                    b.HasOne("API.Domain.Models.Ruleset", null)
                        .WithMany("Abilities")
                        .HasForeignKey("RulesetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Domain.Models.GameSession", b =>
                {
                    b.HasOne("API.Domain.Models.Ruleset", "Ruleset")
                        .WithMany()
                        .HasForeignKey("RulesetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ruleset");
                });

            modelBuilder.Entity("API.Domain.Models.Player", b =>
                {
                    b.HasOne("API.Domain.Models.GameSession", "GameSession")
                        .WithMany("Participants")
                        .HasForeignKey("GameId");

                    b.HasOne("API.Domain.Models.GameSession", null)
                        .WithMany("Winners")
                        .HasForeignKey("GameSessionId");

                    b.HasOne("API.Domain.Models.Role", "Role")
                        .WithMany("PlayersWithRole")
                        .HasForeignKey("RoleId");

                    b.Navigation("GameSession");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("API.Domain.Models.Role", b =>
                {
                    b.HasOne("API.Domain.Models.Ruleset", null)
                        .WithMany("Roles")
                        .HasForeignKey("RulesetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Domain.Models.Round", b =>
                {
                    b.HasOne("API.Domain.Models.GameSession", "GameSession")
                        .WithMany("Rounds")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameSession");
                });

            modelBuilder.Entity("AbilityRole", b =>
                {
                    b.HasOne("API.Domain.Models.Ability", null)
                        .WithMany()
                        .HasForeignKey("AbilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Domain.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("AssociatedRolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayerPlayer", b =>
                {
                    b.HasOne("API.Domain.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("CanBeSeenById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Domain.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("CanSeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleRole", b =>
                {
                    b.HasOne("API.Domain.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("CanBeSeenById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Domain.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("CanSeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Domain.Models.GameSession", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("Rounds");

                    b.Navigation("Winners");
                });

            modelBuilder.Entity("API.Domain.Models.Role", b =>
                {
                    b.Navigation("PlayersWithRole");
                });

            modelBuilder.Entity("API.Domain.Models.Ruleset", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
